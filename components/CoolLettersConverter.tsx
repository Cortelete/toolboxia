import React, { useState, useMemo, useCallback } from 'react';

const IconCopy: React.FC<{className?: string}> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
    </svg>
);

const IconCheck: React.FC<{className?: string}> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l4 4L19 7" />
    </svg>
);

const fontMaps = {
    bold: { a: 'ùóÆ', b: 'ùóØ', c: 'ùó∞', d: 'ùó±', e: 'ùó≤', f: 'ùó≥', g: 'ùó¥', h: 'ùóµ', i: 'ùó∂', j: 'ùó∑', k: 'ùó∏', l: 'ùóπ', m: 'ùó∫', n: 'ùóª', o: 'ùóº', p: 'ùóΩ', q: 'ùóæ', r: 'ùóø', s: 'ùòÄ', t: 'ùòÅ', u: 'ùòÇ', v: 'ùòÉ', w: 'ùòÑ', x: 'ùòÖ', y: 'ùòÜ', z: 'ùòá', A: 'ùóî', B: 'ùóï', C: 'ùóñ', D: 'ùóó', E: 'ùóò', F: 'ùóô', G: 'ùóö', H: 'ùóõ', I: 'ùóú', J: 'ùóù', K: 'ùóû', L: 'ùóü', M: 'ùó†', N: 'ùó°', O: 'ùó¢', P: 'ùó£', Q: 'ùó§', R: 'ùó•', S: 'ùó¶', T: 'ùóß', U: 'ùó®', V: 'ùó©', W: 'ùó™', X: 'ùó´', Y: 'ùó¨', Z: 'ùó≠' },
    italic: { a: 'ùò¢', b: 'ùò£', c: 'ùò§', d: 'ùò•', e: 'ùò¶', f: 'ùòß', g: 'ùò®', h: 'ùò©', i: 'ùò™', j: 'ùò´', k: 'ùò¨', l: 'ùò≠', m: 'ùòÆ', n: 'ùòØ', o: 'ùò∞', p: 'ùò±', q: 'ùò≤', r: 'ùò≥', s: 'ùò¥', t: 'ùòµ', u: 'ùò∂', v: 'ùò∑', w: 'ùò∏', x: 'ùòπ', y: 'ùò∫', z: 'ùòª', A: 'ùòà', B: 'ùòâ', C: 'ùòä', D: 'ùòã', E: 'ùòå', F: 'ùòç', G: 'ùòé', H: 'ùòè', I: 'ùòê', J: 'ùòë', K: 'ùòí', L: 'ùòì', M: 'ùòî', N: 'ùòï', O: 'ùòñ', P: 'ùòó', Q: 'ùòò', R: 'ùòô', S: 'ùòö', T: 'ùòõ', U: 'ùòú', V: 'ùòù', W: 'ùòû', X: 'ùòü', Y: 'ùò†', Z: 'ùò°' },
    script: { a: 'ùí∂', b: 'ùí∑', c: 'ùí∏', d: 'ùíπ', e: 'ùëí', f: 'ùíª', g: 'ùëî', h: 'ùíΩ', i: 'ùíæ', j: 'ùíø', k: 'ùìÄ', l: 'ùìÅ', m: 'ùìÇ', n: 'ùìÉ', o: 'ùëú', p: 'ùìÖ', q: 'ùìÜ', r: 'ùìá', s: 'ùìà', t: 'ùìâ', u: 'ùìä', v: 'ùìã', w: 'ùìå', x: 'ùìç', y: 'ùìé', z: 'ùìè', A: 'ùíú', B: '‚Ñ¨', C: 'ùíû', D: 'ùíü', E: '‚Ñ∞', F: '‚Ñ±', G: 'ùí¢', H: '‚Ñã', I: '‚Ñê', J: 'ùí•', K: 'ùí¶', L: '‚Ñí', M: '‚Ñ≥', N: 'ùí©', O: 'ùí™', P: 'ùí´', Q: 'ùí¨', R: '‚Ñõ', S: 'ùíÆ', T: 'ùíØ', U: 'ùí∞', V: 'ùí±', W: 'ùí≤', X: 'ùí≥', Y: 'ùí¥', Z: 'ùíµ' },
    fraktur: { a: 'ùîû', b: 'ùîü', c: 'ùî†', d: 'ùî°', e: 'ùî¢', f: 'ùî£', g: 'ùî§', h: 'ùî•', i: 'ùî¶', j: 'ùîß', k: 'ùî®', l: 'ùî©', m: 'ùî™', n: 'ùî´', o: 'ùî¨', p: 'ùî≠', q: 'ùîÆ', r: 'ùîØ', s: 'ùî∞', t: 'ùî±', u: 'ùî≤', v: 'ùî≥', w: 'ùî¥', x: 'ùîµ', y: 'ùî∂', z: 'ùî∑', A: 'ùîÑ', B: 'ùîÖ', C: '‚Ñ≠', D: 'ùîá', E: 'ùîà', F: 'ùîâ', G: 'ùîä', H: '‚Ñå', I: '‚Ñë', J: 'ùîç', K: 'ùîé', L: 'ùîè', M: 'ùîê', N: 'ùîë', O: 'ùîí', P: 'ùîì', Q: 'ùîî', R: '‚Ñú', S: 'ùîñ', T: 'ùîó', U: 'ùîò', V: 'ùîô', W: 'ùîö', X: 'ùîõ', Y: 'ùîú', Z: '‚Ñ®' },
    circled: { a: '‚ìê', b: '‚ìë', c: '‚ìí', d: '‚ìì', e: '‚ìî', f: '‚ìï', g: '‚ìñ', h: '‚ìó', i: '‚ìò', j: '‚ìô', k: '‚ìö', l: '‚ìõ', m: '‚ìú', n: '‚ìù', o: '‚ìû', p: '‚ìü', q: '‚ì†', r: '‚ì°', s: '‚ì¢', t: '‚ì£', u: '‚ì§', v: '‚ì•', w: '‚ì¶', x: '‚ìß', y: '‚ì®', z: '‚ì©', A: '‚í∂', B: '‚í∑', C: '‚í∏', D: '‚íπ', E: '‚í∫', F: '‚íª', G: '‚íº', H: '‚íΩ', I: '‚íæ', J: '‚íø', K: '‚ìÄ', L: '‚ìÅ', M: '‚ìÇ', N: '‚ìÉ', O: '‚ìÑ', P: '‚ìÖ', Q: '‚ìÜ', R: '‚ìá', S: '‚ìà', T: '‚ìâ', U: '‚ìä', V: '‚ìã', W: '‚ìå', X: '‚ìç', Y: '‚ìé', Z: '‚ìè' },
};

const styles = [
    { id: 'bold', name: 'Negrito' },
    { id: 'italic', name: 'It√°lico' },
    { id: 'script', name: 'Manuscrito' },
    { id: 'fraktur', name: 'G√≥tico' },
    { id: 'circled', name: 'Circulado' },
];

interface CoolLettersConverterProps {
    onGoBack: () => void;
}

const CoolLettersConverter: React.FC<CoolLettersConverterProps> = ({ onGoBack }) => {
    const [inputText, setInputText] = useState<string>('Texto com estilo!');
    const [copiedStyle, setCopiedStyle] = useState<string | null>(null);

    const convertedTexts = useMemo(() => {
        if (!inputText) {
            return styles.reduce((acc, style) => {
                acc[style.id] = '';
                return acc;
            }, {} as { [key: string]: string });
        }
        const result: { [key: string]: string } = {};
        for (const style of styles) {
            const map = fontMaps[style.id as keyof typeof fontMaps];
            result[style.id] = inputText.split('').map(char => map[char as keyof typeof map] || char).join('');
        }
        return result;
    }, [inputText]);
    
    const handleCopy = useCallback((text: string, styleId: string) => {
        if (!text) return;
        navigator.clipboard.writeText(text).then(() => {
            setCopiedStyle(styleId);
            setTimeout(() => setCopiedStyle(null), 2000);
        });
    }, []);
    
    const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        setInputText(e.target.value);
        setCopiedStyle(null);
    }

    return (
        <>
            <button
                onClick={onGoBack}
                className="flex items-center gap-2 text-sm font-semibold text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors mb-4 group"
                aria-label="Voltar para a p√°gina inicial"
            >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 transform group-hover:-translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M11 17l-5-5m0 0l5-5m-5 5h12" />
                </svg>
                <span>Voltar ao In√≠cio</span>
            </button>
            <div className="w-full max-w-3xl mx-auto bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm border border-gray-200 dark:border-gray-700 rounded-2xl shadow-2xl p-6 sm:p-8 space-y-6">
                <header className="text-center">
                    <h1 className="text-3xl sm:text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-indigo-500 to-fuchsia-600 dark:from-indigo-400 dark:to-fuchsia-500">
                        Letras Diferentes
                    </h1>
                    <p className="text-gray-600 dark:text-gray-400 mt-2">Gere textos com fontes e estilos especiais para redes sociais.</p>
                </header>

                <div className="space-y-2">
                    <label htmlFor="cool-letters-input" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                        Seu Texto
                    </label>
                    <textarea
                        id="cool-letters-input"
                        rows={4}
                        className="w-full bg-gray-50 dark:bg-gray-700/50 border border-gray-300 dark:border-gray-600 rounded-lg p-4 text-gray-800 dark:text-gray-200 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 resize-y"
                        value={inputText}
                        onChange={handleInputChange}
                        placeholder="Digite aqui..."
                    />
                </div>

                <div className="space-y-4">
                    <h2 className="text-lg font-semibold text-gray-700 dark:text-gray-300">Resultados (clique na linha para copiar)</h2>
                    <div className="space-y-3">
                        {styles.map(style => (
                            <div 
                                key={style.id} 
                                onClick={() => handleCopy(convertedTexts[style.id], style.id)}
                                className="flex items-center gap-4 bg-gray-100 dark:bg-gray-900/40 border border-gray-300 dark:border-gray-600 rounded-lg p-3 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700/60 transition-colors"
                                title={`Copiar estilo ${style.name}`}
                            >
                                <p 
                                    className="flex-grow w-full bg-transparent text-gray-800 dark:text-gray-200 text-lg" 
                                    style={{ fontFamily: style.id === 'script' ? 'cursive' : 'sans-serif'}}
                                >
                                    {convertedTexts[style.id] || <span className="text-gray-400 dark:text-gray-500 text-base">...</span>}
                                </p>
                                <span className="text-xs text-gray-500 dark:text-gray-400 hidden sm:inline-block flex-shrink-0">{style.name}</span>
                                <div className="flex-shrink-0">
                                    {copiedStyle === style.id ? <IconCheck className="h-5 w-5 text-green-500" /> : <IconCopy className="h-5 w-5 text-gray-400" />}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </>
    );
};

export default CoolLettersConverter;